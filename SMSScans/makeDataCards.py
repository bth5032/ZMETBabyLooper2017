#!/usr/bin/env python

import argparse, sys, re, getSignalNumbers


signal_chain="/nfs-7/"
#histogram_Path="/nfs-7/userdata/bobak/ZMET2016_Hists_NovemberClean/T5ZZScan/"
histogram_Path="~/"
signal_name="t5zz"

mass_spectrum=[(1600,200),(1750,250),(1150,450),(1600,550),(1250,300),(1600,100),(1550,1000),(1150.000000,1100.000000),(1750.000000,550.000000),(1450.000000,500.000000),(1450.000000,800.000000),(1700.000000,800.000000),(1300.000000,750.000000),(1800.000000,1300.000000),(1100.000000,800.000000),(1000.000000,150.000000),(1000.000000,800.000000),(1650.000000,250.000000),(1650.000000,1150.000000),(1500.000000,450.000000),(1150.000000,550.000000),(1650.000000,450.000000),(1700.000000,850.000000),(1250.000000,1150.000000),(1650.000000,1350.000000),(1300.000000,850.000000),(1050.000000,550.000000),(1300.000000,550.000000),(1250.000000,1200.000000),(1500.000000,650.000000),(1350.000000,850.000000),(1800.000000,1700.000000),(1100.000000,450.000000),(1250.000000,800.000000),(1800.000000,800.000000),(1200.000000,850.000000),(1150.000000,650.000000),(1450.000000,1050.000000),(800.000000,200.000000),(1250.000000,100.000000),(1300.000000,300.000000),(1200.000000,700.000000),(1350.000000,950.000000),(1700.000000,350.000000),(1600.000000,1050.000000),(1300.000000,350.000000),(1750.000000,1550.000000),(1550.000000,800.000000),(1600.000000,450.000000),(1350.000000,450.000000),(1550.000000,1300.000000),(1750.000000,450.000000),(1700.000000,550.000000),(1350.000000,550.000000),(1550.000000,100.000000),(1350.000000,1300.000000),(1000.000000,600.000000),(1050.000000,500.000000),(1750.000000,750.000000),(1600.000000,800.000000),(1250.000000,700.000000),(1050.000000,150.000000),(1650.000000,200.000000),(1550.000000,500.000000),(1300.000000,100.000000),(1500.000000,850.000000),(1100.000000,300.000000),(1500.000000,1150.000000),(1600.000000,250.000000),(1450.000000,550.000000),(1750.000000,1200.000000),(1450.000000,850.000000),(1100.000000,700.000000),(1700.000000,450.000000),(1600.000000,1450.000000),(1700.000000,1350.000000),(1650.000000,550.000000),(1250.000000,450.000000),(1300.000000,800.000000),(1750.000000,1300.000000),(1050.000000,700.000000),(1000.000000,100.000000),(1350.000000,750.000000),(1450.000000,200.000000),(800.000000,600.000000),(1450.000000,1100.000000),(1500.000000,200.000000),(1250.000000,950.000000),(1500.000000,800.000000),(1500.000000,1100.000000),(1100.000000,150.000000),(1150.000000,800.000000),(1800.000000,1100.000000),(1350.000000,700.000000),(1700.000000,1000.000000),(1100.000000,600.000000),(1800.000000,200.000000),(1600.000000,1150.000000),(1500.000000,600.000000),(1750.000000,500.000000),(1600.000000,950.000000),(1200.000000,1150.000000),(1550.000000,300.000000),(1200.000000,250.000000),(1000.000000,700.000000),(1350.000000,1100.000000),(1800.000000,1200.000000),(1350.000000,200.000000),(1700.000000,200.000000),(1650.000000,600.000000),(1500.000000,1200.000000),(1200.000000,450.000000),(1700.000000,1100.000000),(1750.000000,200.000000),(1300.000000,250.000000),(800.000000,500.000000),(1100.000000,250.000000),(1800.000000,350.000000),(1000.000000,200.000000),(1000.000000,850.000000),(1050.000000,850.000000),(1550.000000,1150.000000),(1150.000000,850.000000),(1250.000000,350.000000),(1750.000000,300.000000),(1600.000000,1100.000000),(1150.000000,100.000000),(1450.000000,1200.000000),(1750.000000,150.000000),(1350.000000,800.000000),(1050.000000,100.000000),(1550.000000,1250.000000),(1550.000000,250.000000),(1800.000000,300.000000),(1500.000000,700.000000),(1150.000000,950.000000),(1550.000000,1050.000000),(1750.000000,1000.000000),(1650.000000,850.000000),(1200.000000,300.000000),(1250.000000,850.000000),(1300.000000,450.000000),(1150.000000,200.000000),(1500.000000,550.000000),(1650.000000,1200.000000),(1500.000000,750.000000),(1500.000000,1350.000000),(1700.000000,150.000000),(1100.000000,850.000000),(1450.000000,250.000000),(1150.000000,1050.000000),(1500.000000,1050.000000),(1750.000000,850.000000),(1200.000000,1050.000000),(1800.000000,1350.000000),(1150.000000,300.000000),(1550.000000,850.000000),(1800.000000,450.000000),(1200.000000,800.000000),(1350.000000,1050.000000),(1050.000000,300.000000),(1750.000000,1150.000000),(1300.000000,1050.000000),(1750.000000,1450.000000),(1600.000000,1350.000000),(1000.000000,950.000000),(1600.000000,1300.000000),(1650.000000,1300.000000),(1350.000000,250.000000),(1700.000000,600.000000),(1150.000000,250.000000),(1350.000000,1000.000000),(1750.000000,950.000000),(1800.000000,1450.000000),(1650.000000,650.000000),(1700.000000,950.000000),(1300.000000,200.000000),(1750.000000,1600.000000),(1650.000000,1450.000000),(1000.000000,450.000000),(1600.000000,750.000000),(1350.000000,650.000000),(1200.000000,950.000000),(1700.000000,1600.000000),(1100.000000,550.000000),(1700.000000,1200.000000),(1100.000000,100.000000),(1350.000000,600.000000),(1150.000000,350.000000),(1100.000000,1000.000000),(1550.000000,1450.000000),(1500.000000,350.000000),(1600.000000,600.000000),(1500.000000,950.000000),(1750.000000,1700.000000),(1450.000000,750.000000),(1250.000000,1100.000000),(1450.000000,950.000000),(1450.000000,1250.000000),(1650.000000,100.000000),(1050.000000,450.000000),(1450.000000,1150.000000),(1550.000000,750.000000),(1600.000000,1250.000000),(1050.000000,250.000000),(1550.000000,200.000000),(1650.000000,1500.000000),(1300.000000,1000.000000),(1300.000000,700.000000),(1500.000000,150.000000),(1700.000000,700.000000),(1750.000000,1350.000000),(1550.000000,1350.000000),(1550.000000,650.000000),(1200.000000,750.000000),(1600.000000,1200.000000),(1000.000000,750.000000),(1450.000000,300.000000),(1450.000000,600.000000),(1250.000000,150.000000),(1500.000000,300.000000),(1250.000000,550.000000),(1750.000000,600.000000),(1350.000000,150.000000),(1050.000000,1000.000000),(1800.000000,1000.000000),(1800.000000,100.000000),(1300.000000,500.000000),(1800.000000,650.000000),(1100.000000,1050.000000),(1200.000000,600.000000),(1750.000000,1650.000000),(1800.000000,750.000000),(1700.000000,1050.000000),(1750.000000,700.000000),(1650.000000,1600.000000),(1700.000000,1500.000000),(1650.000000,300.000000),(1800.000000,1750.000000),(1700.000000,100.000000),(1550.000000,550.000000),(1800.000000,1150.000000),(1800.000000,850.000000),(800.000000,100.000000),(1600.000000,1000.000000),(1800.000000,250.000000),(1550.000000,1200.000000),(1800.000000,1550.000000),(1200.000000,150.000000),(1250.000000,250.000000),(1700.000000,250.000000),(1200.000000,500.000000),(1700.000000,1150.000000),(1550.000000,950.000000),(1450.000000,100.000000),(1200.000000,550.000000),(1500.000000,1250.000000),(1150.000000,500.000000),(1300.000000,1150.000000),(1450.000000,1300.000000),(1500.000000,1300.000000),(1600.000000,300.000000),(1000.000000,300.000000),(1600.000000,1550.000000),(1650.000000,750.000000),(1550.000000,1100.000000),(1500.000000,500.000000),(1750.000000,1500.000000),(1650.000000,350.000000),(1050.000000,600.000000),(1750.000000,1250.000000),(1200.000000,650.000000),(1050.000000,650.000000),(1700.000000,300.000000),(1600.000000,650.000000),(1600.000000,500.000000),(1150.000000,600.000000),(1500.000000,1450.000000),(1200.000000,1000.000000),(1650.000000,500.000000),(1100.000000,350.000000),(1550.000000,1500.000000),(1450.000000,350.000000),(1150.000000,750.000000),(1450.000000,650.000000),(1250.000000,500.000000),(1800.000000,600.000000),(800.000000,300.000000),(1600.000000,700.000000),(1650.000000,1000.000000),(1550.000000,150.000000),(1050.000000,750.000000),(1800.000000,1250.000000),(1800.000000,1050.000000),(1150.000000,700.000000),(1700.000000,1650.000000),(1500.000000,250.000000),(1750.000000,1050.000000),(1350.000000,350.000000),(1300.000000,650.000000),(1800.000000,950.000000),(1000.000000,250.000000),(1700.000000,650.000000),(1800.000000,150.000000),(1700.000000,1550.000000),(1150.000000,150.000000),(1650.000000,1250.000000),(1350.000000,300.000000),(1250.000000,1050.000000),(1650.000000,950.000000),(1000.000000,650.000000),(1800.000000,500.000000),(1350.000000,1200.000000),(1200.000000,100.000000),(1600.000000,150.000000),(1350.000000,1250.000000),(1300.000000,1250.000000),(1100.000000,950.000000),(1100.000000,500.000000),(1300.000000,150.000000),(1050.000000,950.000000),(1700.000000,750.000000),(1250.000000,600.000000),(1600.000000,350.000000),(1450.000000,150.000000),(1450.000000,450.000000),(1300.000000,1100.000000),(1700.000000,1250.000000),(1300.000000,600.000000),(1800.000000,1600.000000),(1250.000000,200.000000),(1000.000000,550.000000),(1750.000000,350.000000),(1700.000000,1450.000000),(1650.000000,800.000000),(1800.000000,1500.000000),(1550.000000,600.000000),(1050.000000,350.000000),(1250.000000,750.000000),(1350.000000,1150.000000),(1050.000000,800.000000),(1750.000000,800.000000),(1200.000000,1100.000000),(1600.000000,1500.000000),(1550.000000,350.000000),(1200.000000,200.000000),(1600.000000,850.000000),(1350.000000,500.000000),(1650.000000,150.000000),(1800.000000,550.000000),(1450.000000,700.000000),(800.000000,700.000000),(1450.000000,1000.000000),(1500.000000,100.000000),(1300.000000,950.000000),(1750.000000,1100.000000),(1650.000000,700.000000),(1450.000000,1350.000000),(1500.000000,1000.000000),(1050.000000,200.000000),(1100.000000,650.000000),(1700.000000,1300.000000),(1100.000000,200.000000),(1250.000000,650.000000),(1550.000000,450.000000),(1300.000000,1200.000000),(1350.000000,100.000000),(1750.000000,100.000000),(1200.000000,350.000000),(1000.000000,500.000000),(1800.000000,700.000000),(1650.000000,1550.000000),(1650.000000,1100.000000),(1550.000000,700.000000),(1250.000000,1000.000000),(1150.000000,1000.000000),(1800.000000,1650.000000),(1700.000000,500.000000),(1750.000000,650.000000),(1100.000000,750.000000),(1650.000000,1050.000000),(1000.000000,350.000000)]

templates_path="SMSScans/Templates/"
output_path="SMSScans/DataCards/"

n_parms = {}

def properSpacing(key, param):
  """return param padded with spaces so that it's length {key} to preserve tabbing in templates"""

  delta=len(key)-len(param)

  if (len(param) < len(key)):
    param=(" "*delta)+param

  return param

def addSignalYields(d, SR, mass_gluino, mass_lsp):
  """Pulls and computes CV. yields, stat uncertainty, btag light SF unc, btag heavy SF unc, and ISR SF unc from the signal scan histogram at the proper mass point."""

  yields, stat_uncs, bl_yields, bh_yields, isr_yields = getSignalNumbers.getSignalYields(SR, mass_gluino, mass_lsp, "%s%s/%s.root" % (histogram_Path, SR, signal_name))

  for i,y in enumerate(yields):
    stat_nuisence = 0
    bl_nuisence = 0
    bh_nuisence = 0
    isr_nuisence = 0

    #make sure we don't divide by 0
    if y != 0:
      stat_nuisence = (1 + stat_uncs[i]/y)
      bl_nuisence = bl_yields[i]/y
      bh_nuisence = bh_yields[i]/y
      isr_nuisence = isr_yields[i]/y

    d["BGbin%d_sig" % i] = properSpacing("{BGbin1_sig}", "%.4f" % y)
    d["sig_stat_syst_bin%d" % i] = properSpacing("{sig_stat_syst_bin1}","%.4f" % stat_nuisence)

    d["sig_btaglight_syst_bin%d" % i] = properSpacing("{sig_btaglight_syst_bin1}", "%.4f" % bl_nuisence)  
    d["sig_btagheavy_syst_bin%d" % i] = properSpacing("{sig_btagheavy_syst_bin1}", "%.4f" % bh_nuisence)  

    d["sig_isr_syst_bin%d" % i] = properSpacing("{sig_isr_syst_bin1}", "%.4f" % isr_nuisence)

def addConstantVals(d):
  d["sig_trig_syst"] = properSpacing("{sig_trig_syst}","1.04")
  d["sig_metfromFS_syst_bin1"] = properSpacing("{sig_metfromFS_syst_bin1}","1.04")
  d["sig_metfromFS_syst_bin2"] = properSpacing("{sig_metfromFS_syst_bin2}","1.04")
  d["sig_metfromFS_syst_bin3"] = properSpacing("{sig_metfromFS_syst_bin3}","1.04")
  d["sig_leptonFS_syst"] = properSpacing("{sig_leptonFS_syst}","1.04")
  
  d["sig_lumi_syst"] = properSpacing("{sig_lumi_syst}","1.04")
  d["sig_JES_syst_bin1"] = properSpacing("{sig_JES_syst_bin1}","1.04")
  d["sig_JES_syst_bin2"] = properSpacing("{sig_JES_syst_bin2}","1.04")
  d["sig_JES_syst_bin3"] = properSpacing("{sig_JES_syst_bin3}","1.04")

def getNuisenceParameters(SR):
  """Reads in the output of the plot maker for the signal region and collects all the key value pairs of nuisance parameters."""
  f = open("outputs/configs_prediction_Final_%s.plots_out" % SR, "r")
  
  n_dict = {}
  for line in f:
    if re.match("{.*} [0-9]*\.[0-9]*\s$", line):
      toks=line.split()
      n_dict[toks[0][1:-1]] = properSpacing(toks[0],"%.4f" % float(toks[1]))

  addConstantVals(n_dict)

  return n_dict

def makeDataCard(sp, SR):
  if SR not in n_parms.keys():
    n_parms[SR] = getNuisenceParameters(SR)

  addSignalYields(n_parms[SR], SR, sp[0], sp[1])

  for x in n_parms[SR].keys():
    print("%s : %s" % (x, n_parms[SR][x]))

  f_template=open("%s%s.txt" % (templates_path, SR), 'r')
  f_out=open("%s%s_mglu%d_mlsp%d.txt" % (output_path, SR, sp[0], sp[1]), 'w+')

  f_out.write(f_template.read().format(**n_parms[SR]))

  f_out.close()
  f_template.close()


def main():
  #mass_spectrum = getMassSpectrumFromTChain(signal_chain)
  #makeDataCard((1750.000000,1700.000000), "SRAb")

  for sp in mass_spectrum:
    #pass
    #makeDataCard(sp, "SRA")
    makeDataCard(sp, "SRAb")
    #makeDataCard(sp, "SRB")
    #makeDataCard(sp, "SRBb")
    #makeDataCard(sp, "SRC")
    #makeDataCard(sp, "SRCb")
    #makeDataCard(sp, "TChiHZ")
    #makeDataCard(sp, "TChiWZ")


if __name__=="__main__":
  main()