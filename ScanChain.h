// Usage:
// > root -b doAll.C

//
// 2016 MET study looper. Written by Bobak Hashemi May 13 2016
//

// C++
#include <iostream>
#include <vector>
#include <set>
#include <utility>
#include <fstream>


// ROOT
#include "TBenchmark.h"
#include "TChain.h"
#include "TDirectory.h"
#include "TFile.h"
#include "TROOT.h"
#include "TTreeCache.h"
#include "TEfficiency.h"
#include "TH1.h"
#include "TH2.h"

// Analysis Specific
#include "ZMET2016.cc"

// CORE
//You can not include headers!!! This is not compiled code.
#include "CoreTools/dorky.cc"
#include "CoreTools/goodrun.cc"
#include "/home/users/bhashemi/Projects/GIT/CORE/Tools/MT2/MT2Utility.cc"
#include "/home/users/bhashemi/Projects/GIT/CORE/Tools/MT2/MT2.cc"
// Configuration parsing
#include "ConfigParser.C"
#include "ConfigHelper.C"

using namespace std;
using namespace zmet;
using namespace duplicate_removal;

typedef ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > LorentzVector;

//Global Vars
ConfigParser *conf;
int nDuplicates=0;
int num_events_veto_ttbar=0;
int num_events_veto_ttgamma=0;
bool MCTriggerEmulation = true;

vector<pair <TH1D*, TString> > g_reweight_pairs;
TDirectory *rootdir = gDirectory->GetDirectory("Rint:");
TH1D *g_pileup_hist, *g_l1prescale_hist22, *g_l1prescale_hist30, *g_l1prescale_hist36;
TEfficiency *g_pt_eff_barrel, *g_pt_eff_endcap; 
TFile *g_weight_hist_file, *g_pileup_hist_file, *g_l1prescale_file;
TString g_sample_name;
TFile* currentFile = 0;
double g_scale_factor=1; //Holds scale factors for sample.

TH1I *numEvents; //Holds the number of events in the whole script and the number that pass various cuts 

//set<int> inVinceNotMine = {1671877,182026,1691579,584123,919749,1637499,1956497,1038429,1276319,1475891,269306,440564,150193,591835,1864740,412753,1075606,354472,1201846,1498264,1537883,1545891,1152994,1153259,1652526,1333934,1093592,1718777,14650,508134,68097,474963,1982414,742786,556682,1886164,1611196,1559914,1230667,483404,719522,610276,1672403,944218,34871,1710872,1144948,1544257,353132,1654061,729831,172381,227100,625408,1566248,1068185,1868620,1273300,1873096,1553855,1550022,1660945,1832499,1672847,349820,1608601,630334,9104,1859361,1636849,938062,639614,1785229,1611489,1666499,1227158,1227317,11553,135776,713994,1233314,127103,756142,455254,277372,1948195,1476819,670038,1944133,1941081,916601,1796585,1830109,1487887,1890032,1564523,1978932,1187192,278190,839872,1335018,842379,355868,1174419,995752,1908016,1958574,1113094,1600282,525904,1165406,665419,668203,1957008,1398462,1389772,791755,886367,1784234,197045,769281,769397,499702,1754142,626319,671378,897686,1841626,1516470,1883436,1884038,264557,1415341,1858631,758980,196759,431803,1846737,1421249,1618690,550728,881955,528804,1917033,1974976,1568663,1175567,1753848,1789631,1182223,231669,710053,385926,704939,329723,816674,949506,89520,1896034,619515,173320,970140,1697399};

//set<int> inMineNotVince = {65603,206256,215885,352922,823174,928555,1058265,1295652,1601624,1731568,1948640};

set<long> inspection_set = {446912670,411131170,15405861,584228958,14203891,85470426,1506544210,405077299,498184440,474493176,714008290,599524472,308264066,268373042,957484721,1283027826,2124587761,325760233,48987779,375432780,2362030194,551255740,368723574,593025609,507351115,44438398,226436034,500405170,90742531,687330514,769620071,759167636,1554238976,154939362,633214550,949717708,1599287772,98194428,485685969,483701418,370710626,834697629,418651650,3699201302,891240730,104670004,138079864,1241950260,1730941342,1116918236,223735882,567304602,17662543,836799689,50414492,1538911732,528794792,1441761553,1485274043,200287523,115348344,2007409303,964145967,185183260,1202159790,1429043412,139193612,1502419317,963756973,1292052857,1635590919,367467579,337781268,321796236,678511248,775594501,656467006,429645602,975744985,1357072292,1349354042,538493797,278334398,1369240885,1248061084,113704325,1398973481,505308078,10027757,405526372,174669350,132203912,525290168,578294770,761910713,85857592,454321863,889847642,1259943982,499046387,525257256,656247657,111383006,654001763,35495309,45620502,191303099,383715357,712787009,2963610076,2259751408,599583398,463325727,16741914,979425869,3609587459,461268471,98711848,1102076480,4441699321,2758706989,391832426,4661260,991783679,774471445,242998980,1840657780,2773123378,84665016,367743293,1145342567,1710802004,1351744974,100009692,3180471468,500139826,70264911,1277644982,446492516,2740335813,3176795912,2963652321,2188980787,1115744880,1657648735,915491525,32884734,2018924857,2085215400,73294343,799372980,339360581,987922830,2576595101,2053046069,622699685,199680177,1194474102,1110673724,960693547,2383636270,800894400,1759473354,123985858,1072792265,364576876,238142984,1058388592,725179598,1746082038,321459146,190589499,806573271,1094779189,525496135,777114507,196563738,671620251,223044166,754672805,2577054717,90816020,180810773,128977341,484100714,1510282584,1220054509,80617323,358180709,366776019,148619238,2507068208,1469265912,576643608,826744488,75273175,65763233,3351899453,3493689747,507367976,2719080190,226887973,90007284,631184958,1361525498,1474700878,202555137,1478751688,2408546412,934833372,230938296,1808223665,1726350174,24881293,308386114,2718470159,1572199636,271967709,661930012,464700190,481519066,251130289,2630982821,83767665,406994229,528380366,2252379495,69974863,598678844,163686738,322951146,1370320586,923564687,849015575,2887013613,2003942393,2196385166,252304856,48512973,760122412,27441029,71224066,1533615064,661594594,3207512677,120790282,35471238,611100260,101645567,2719792917,33600849,855568077,281857557,1951383830,162276255,353580600,810916840,548884270,867571507,57966889,584959502,668544567,1457220658,1881551749,52304953,69282688,208688687,469852840,984093713,73708764,90634618,358465002,761254794,476721764,491467528,207270681,105338603,2844763762,25322312,36201823,490798625,1164010648,675938052,623203810,576996573,704438652,433119744,893764445,222366391,242952528,1536364729,956528108,1075741112,436623344,1313360517,165237392,659411107,98718085,101803627,127587312,711974880,530076746,1323447641,1046547114,111242434,148431377,831402395,2939008113,121081925,228545898,55531807,999957050,713632411,88501831,1708469549,265630730,1895625702,998615983,128981569,582584222,629540779,1832415156,237864560,321444945,385938027,1514852672,1517902846,169519666,169508579,937472881,1228548503,618843314,299382109,839542171,508140216,399293418,1202988269,517149012,216881264,289400670,140868372,1087396320,154921517,645363521,981620426,1597583140,405055062,1930186694,334200984,1506904040,2179114839,299386443,603984247,47166555,704288490,582040157,254603687,1374244490,559880471,431266223,1207148927,285732828,622130933,160895688,2443324308,64635874,829973370,735092876,164766327,16450104,95844035,227074878,1233403995,555799453,67681776,638974092,992485886,870822952,2101414645,45296145,2790814579,371989162,862419688,60606902,821321121,373482955,478847765,155721965,1935233061,99795815,177679464,238578205,1225811473,1835234049,284647538,726655537,951223171,1854840845,1728469276,1331982311,440033931,644742765,5316881,1712716938,160960764,414175353,698806328,583416853,454683658,1010744879,438463248,694210809,1570931582,209494241,513029908,475048595,423584675,761226281,2829917529,416324149,480857476,2536673734,2869977498,161376426,213856231,370027188,258492954,1804614936,292490919,1566677186,883968818,671297808,361041572,1734756378,117138699,582130676,44378323,3176251865,66390706,693189517,618780574,1469045020,123442712,1064658055,734054688,3045408609,143422195,583454337,154306972,642775195,1384835826,882486219,2734404918,214852492,422388965,60709768,3715152,732779286,3657447543,1026912431,373716150,1016441387,59104726,922468691,479030330,1328797524,152316487,1415811356,206296403,352943047,327973001,2353949132,146254557,513456334,173307472,3605005450,34534627,59548207,541356859,1413738984,649780564,658314162,3432844987,802406967,1259734041,552381436,702555889,1232573659,209036256,4479888562,114095835,830039201,239948422,38465689,722603926,391800362,487423829,81217292,2037943567,311681746,188928947,1117345657,675510075,1209409113,74443913,11649408};

bool printStats = false;
bool printFail = false;

/* returns two most B-like jet indicies */
pair<int, int> getMostBlike();

/*Finds the pair of B tagged jets (csv medium) with dijet mass closest to the mass of the higgs*/
pair<int,int> getClosestBPairToHiggsMass();

/*Builds MT2b from two highest CSV jets*/
double getMT2B();

/*Builds Mbb from two highest CSV jets*/
double getMbb();

/*This function gets the MT2 built out of the two Bjets in an event, no guarentee 
is made about selecting the highest csv jets*/
double getMT2ForBjets(bool select_highest_csv=false);

/*Builds MT2 for the two leading Bjets unless select_closest_higgs_mass is set, in which case it 
builds it out of the two bjets with dijet mass nearest the mass of the higgs.*/
double getMT2HiggsZ(bool select_highest_closest_higgs_mass=false);

/*Returns boson Pt, determines whether sample is gjets or zjets first*/
double bosonPt();

/* Builds the MT from the lepton at index id and the MET vector (assumes massless particles)*/
double getMTLepMET(short id=0);

/* Builds the delta R (sqrt(dPhi^2 + dEta^2)) between the lepton at index id and the leading photon*/
double getdRGammaLep(short id=0);

//=============================
// Triggers
//=============================
/*Checks that the event passes an "emulated photon trigger"*/
bool passPhotonEmulatedTrigger();

/*Ensures the event is within the efficiency plateu of the highest pt trigger it passed*/
bool passPhotonTriggers();

/*MC passes immediately, ensures data events were gathered from di-muon triggers*/
bool passMuonTriggers();

/*MC passes immediately, ensures data events were gathered from di-electron triggers*/
bool passElectronTriggers();

/*MC passes immediately, ensures data events were gathered from EMu triggers*/
bool passEMuTriggers();

/*MC passes immediately, ensures data events were gathered from SingleMu trigger*/
bool passSingleMuTriggers();

/*Helper method which chooses which above method to call. Calls EMu if the dil_flavor is emu, otherwise uses
the hyp_type to determine which to call. Events fail if they are hyp_type 2 and not tagged for emu*/
bool passLeptonHLTs();

//=============================
// Has Good Event Functions
//=============================
/*Lepton quality and Z mass cuts*/
bool hasGoodZ();

/*Photon quality cuts*/
bool hasGoodPhoton();

/*Method for testing whether the event has a good gamma mu pair trigger requirements are on the photon.
  It just checks muon quality stuff and then calls hasGoodPhoton()*/
bool hasGoodGammaMu();

/*Just a helper method that chooses which hasGood method to call based on the config event_type*/
bool hasGoodEvent();

//=============================
// Event Weight Assignment
//=============================

/*Goes through the chain of weight_from config options down to a config which does not have weight_from and
then adds a pair (config_name, hist_file) to the vector g_reweight_pairs.

For now this is depricated: NEEDS TO BE UPDATED WITH NEW CODE FIXES*/
void readyReweightHists();

/* Adds the vpt reweighting histogram to the g_reweight_pairs vector */
void readyVPTReweight(TString save_path);

/* Returns the trigger efficiency from g_pt_eff */
double getEff(const double &pt, const double &eta);

/*Loads the reweight hists from g_reweight_pairs and multiplies returns the weight associated with the proper
bin in the histogram*/
double getReweight();

/*This method stores fixes to the evt_scale1fb in the event of file corruptions. 
It's basically just a lookup table*/
double scale1fbFix();

/*Main function for determining the weights for each event*/
double getWeight();

/*Returns the weight associated with the photon prescales*/
double getPrescaleWeight();

//=============================
// Cuts
//=============================

/*Holds the cuts for all the signal regions, basically all the cuts that are turned on with a config option*/
bool passSignalRegionCuts();

/*Checks for a gen Neutrino (Real MET) and a gen Z (Real Z), only should be run when running
over samples tagged as "rares". This is only neccesary for the full prediction.*/
bool passRareCuts();

/*Checks for cuts that are spcific to SUSY samples like choosing a particular mass point*/
bool passSUSYSingalCuts();

/*Front end method to "Dorky" duplicate removal*/
bool isDuplicate();

/*Checks for MET filters*/
bool passMETFilters();

/*Holds baseline cuts*/
bool passBaseCut();

/*Method which holds all the file specific selections, for instance cutting out the
  events with genht > 100 in the DY inclusive samples*/
bool passFileSelections();

/*Obvi the event looper*/
int ScanChain( TChain* chain, ConfigParser *configuration, bool fast = true, int nEvents = -1);